package junit_testcases;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.EnumSet;
import javax.lang.model.element.Modifier;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.squareup.javawriter.JavaWriter;

/**
 * This is a Junit test cases generator
 * 
 * @author HE YE
 *
 */
public class TestsGenerator {

	private static String path = Thread.currentThread().getContextClassLoader().getResource("").getPath();
	private static int TIMEOUT = 100;

	public static void main(String[] args) throws IOException {
		File[] files = traverseFolder(path + "json_testcases");
		// Assuming target class name is the capital of Json test name and
		// method name is the same with Json test name
		for (File f : files) {
			if (!f.isDirectory()) {
				String filePath = f.getAbsolutePath();
				String jsonName = f.getName().replaceAll("[.][^.]+$", "");
				String clazzName = jsonName.toUpperCase();
				createJunitTest(filePath, clazzName, jsonName);
			}
		}
	}

	public static File[] traverseFolder(String path) throws IOException {
		System.out.println("traverseFolder");
		File file = new File(path);
		if (file.exists()) {
			File[] files = file.listFiles();
			if (files.length == 0) {
				System.out.println("The folder is empty!");
				return null;
			} else {
				return files;
			}
		} else {
			System.out.println("File is not exist!");
			return null;
		}
	}

	private static void createJunitTest(String filePath, String clazzName, String methodName) throws IOException {
		try {

			Class targetClass = Class.forName("java_programs." + clazzName);
			Method[] methods = targetClass.getDeclaredMethods();
			Type[] types = null;
			for (Method method : methods) {
				if (methodName.equals(method.getName())) {
					types = method.getParameterTypes();
				}
			}
			String packageName = "junit_testcases";
			String className = "TEST_" + clazzName;
			File outFile = new File(path + "junit_testcases" + "/" + className + ".java");
			OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile));
			System.out.println(outFile.getAbsolutePath());
			JavaWriter jw = new JavaWriter(writer);
			// Configure package name, class name and Javadoc
			jw.emitPackage(packageName).emitStaticImports("org.junit.Assert.*").emitImports("org.junit.Test")
					.emitImports("java_programs." + clazzName)
					.beginType(packageName + "." + className, "class", EnumSet.of(Modifier.PUBLIC))
					.emitJavadoc("Junit test case for " + clazzName + " generated by tests generator.");

			// Create test method per line of Json test case
			ArrayList<JsonElement> jsonElements = readJsonFile(filePath);
			int count = 1;
			for (JsonElement jsonElement : jsonElements) {
				JsonArray jsonArray = jsonElement.getAsJsonArray();
				JsonElement input = jsonArray.get(0);
				JsonElement output = jsonArray.get(1);
				JsonArray inputArray;
				if (input.isJsonArray()) {
					inputArray = input.getAsJsonArray();
				} else {
					inputArray = new JsonArray();
					inputArray.add(input);
				}
				Object[] parameters = getParameters(types, inputArray);

				// TODO: Specify multiple parameters with correct Type.
				String parameterStr = null;
				for (int i = 0; i < parameters.length; i++) {
					System.out.println("parameters" + parameters[0]);
					if (i == 0) {
						parameterStr = parameters[i].toString();
					} else {
						parameterStr = "," + parameters[i];
					}
				}
				jw.emitAnnotation("Test(timeout = " + TIMEOUT + ")")
						.beginMethod("void", "test" + count, EnumSet.of(Modifier.PUBLIC))
						.emitStatement("Object actual = " + clazzName + "." + methodName + "(" + parameterStr + ")",null)
						.emitStatement("assertEquals(\"" + output + "\"" + ",actual.toString() )", null)
						.endMethod()
						.emitEmptyLine();
				count++;
			}

			jw.endType().close();
		} catch (Exception e) {
			System.out.println(e);
		}

	}

	@SuppressWarnings("finally")
	public static ArrayList<JsonElement> readJsonFile(String path) throws IOException {
		ArrayList<JsonElement> jsonElements = new ArrayList<JsonElement>();
		JsonParser parser = new JsonParser();
		JsonElement je = null;
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(path));
			String s = null;
			while ((s = br.readLine()) != null) {
				je = parser.parse(s);
				jsonElements.add(je);
			}
		} catch (Exception e) {
			e.printStackTrace();

		} finally {
			br.close();
			return jsonElements;
		}

	}

	/**
	 * Create list of objects corresponding to input arguments
	 */

	public static Object[] getParameters(Type[] types, JsonArray args) {
		int numOfParameters = types.length;
		Object[] parameters = new Object[numOfParameters];
		Gson gsonArguments = new Gson();
		try {
			for (int i = 0; i < numOfParameters; i++) {
				Type type = types[i];
				parameters[i] = gsonArguments.fromJson(args.get(i), (Class) type);
				System.out.println("parameters" + parameters[i]);
				if (type.getTypeName().equals("java.util.ArrayList")) {
					JsonParser parser = new JsonParser();
					JsonArray array = parser.parse(args.get(i).toString()).getAsJsonArray();
					ArrayList checked_arr = new ArrayList();
					for (int j = 0; j < array.size(); j++) {
						JsonElement elem = array.get(j);
						String str_elem = elem.getAsString();
						if (str_elem.matches("[0-9]+")) {
							checked_arr.add((Integer) elem.getAsInt());
						} else if (str_elem.matches("[0-9]+.[0-9]+")) {
							checked_arr.add(elem.getAsDouble());
						} else {
							checked_arr.add(str_elem);
						}
					}
					parameters[i] = checked_arr;
				} else {
					parameters[i] = gsonArguments.fromJson(args.get(i), (Class) type);
				}
			}
		} catch (NumberFormatException e) {
			System.out.println("Incompatible types: Object cannot be converted.");
		}
		return parameters;
	}
}
